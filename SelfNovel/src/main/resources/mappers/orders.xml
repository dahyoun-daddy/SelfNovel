<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sn.orders.repository.mappers.orders">
	<select id="do_searchOriginal" parameterType="com.sn.resume.domain.UnityItmVO" resultType="com.sn.resume.domain.UnityItmVO">
		SELECT *
		  FROM resume a, item b
		 WHERE a.rsm_id = b.rsm_id
		   AND a.rsm_id = '${rsm_id}'
		   AND b.itm_prd_id IS NULL
	</select>
	
	<select id="do_searchRev" parameterType="com.sn.resume.domain.UnityItmVO" resultType="com.sn.resume.domain.UnityItmVO">
		SELECT *
		FROM item
		WHERE rsm_id = '${rsm_id}'
		  AND itm_prd_id IS NOT NULL
		ORDER BY itm_prd_id
	</select>
	
	<update id="do_saveFirstTime" parameterType="com.sn.resume.domain.UnityItmVO">
		INSERT INTO item(rsm_id, itm_form_id, itm_prd_id, itm_title, itm_content, u_id, itm_reg_dt, itm_seq, itm_use_yn)
		VALUES('${rsm_id}', item_seq.nextval, ${itm_prd_id}, '${itm_title}', '${itm_content}', '${u_id}', SYSDATE, item_seq.currval, 1)
	</update>
	
	<update id="do_updateItem" parameterType="com.sn.resume.domain.UnityItmVO">
		UPDATE item
		SET itm_title = '${itm_title}',
		    itm_content = '${itm_content}'
		WHERE rsm_id = '${rsm_id}'
		  AND itm_form_id = '${itm_form_id}'
	</update>
	
	<update id="do_updateUseYN" parameterType="com.sn.resume.domain.UnityItmVO">
		UPDATE item
		SET itm_use_yn = ${itm_use_yn}
		WHERE rsm_id = '${rsm_id}'
		 AND itm_form_id = '${itm_form_id}'
	</update>
	
	<!-- do_save -->
	<insert id="do_save" parameterType="OrdersVO">
		INSERT
		INTO ORDERS
		  (
		    rsm_id,
		    exp_id,
		    u_id,
		    ord_state,
		    ord_reg_dt,
		    ord_use_yn
		  )
		  VALUES
		  (
		    #{rsm_id},
		    #{exp_id},
		    #{u_id},
		    #{ord_state},
		    sysdate,
		    1
		  )
	</insert>
	
	<!-- do_search -->
	<!-- parameter로 map을 사용한다. -->
	<!-- 필요 String: page_num, page_size, isExpert, (expert_id or u_id)-->
	<!-- 
		isExpert가 2(exp_id)일시 exp_id가 검색조건
		isExpert가 1(u_id)일시 u_id가 검색조건
	 -->
	<select id="do_search" parameterType="String" resultType="OrdersVO">
		<include refid="com.sn.common.pagingPre"/>
	      SELECT A.rsm_id,
		 		 A.exp_id,
		  		 A.u_id,
		  		 A.ord_state,
		  		 A.ord_reg_dt,
		  		 A.ord_use_yn,
	             ROW_NUMBER() OVER (ORDER BY A.ord_reg_dt DESC) AS RNUM,
	             GET_CD_NM('C001',ord_state) as ord_state_nm,
		  		 GET_RS_NM(rsm_id) as rsm_title
	      FROM ORDERS A
 		  <include refid="orderIdSearchCondition" />
	      ORDER BY A.ord_reg_dt DESC
	    <include refid="com.sn.common.pagingPost" /> 
	</select>
	
	<sql id="orderIdSearchCondition">
 		<where>    
		    <choose>
		    	<when test="SEARCH_DIV == 2">
		    		A.exp_id=#{SEARCH_ID}
		    	</when>
		    	<when test="SEARCH_DIV == 1">
		    		A.u_id=#{SEARCH_ID}
		    	</when>
		    	<otherwise>
		    	
		    	</otherwise>
		    </choose>
		    AND A.ord_use_yn=1
		</where>      	
 	</sql>
	
	<!-- do_delete -->
	<!-- 
		실제 삭제하지는 않으며 플래그만 0으로 바꾸면 됨
	-->
	<delete id="do_delete" parameterType="OrdersVO">
		UPDATE ORDERS
		SET ord_use_yn = 0
		WHERE rsm_id   = #{rsm_id}
	</delete>
	
	<insert id="do_update" parameterType="OrdersVO">
	</insert>

	<!-- resume 조회가 생기면 추가해도 될듯 -->
	<select id="do_searchOne" parameterType="OrdersVO" resultType="OrdersVO">
		SELECT * FROM ORDERS WHERE rsm_id = '${rsm_id}'
	</select>
	
	<!-- do_nextState -->
	<!-- 
		ORD_NEXT_STAT: 코드테이블을 이용하여 다음 단계의 값을 반환하는 함수.	
	 -->
	<update id="do_nextState" parameterType="OrdersVO">
		UPDATE ORDERS
		SET ord_state = ORD_NEXT_STAT(ord_state)
		WHERE rsm_id   = ${rsm_id}
		  AND exp_id   = '${exp_id}'
	</update>
	
	<update id="do_reject">
		UPDATE ORDERS
		SET ord_state = 10
		WHERE rsm_id   = #{rsm_id}
		  AND exp_id   = #{exp_id}
	</update>
</mapper>